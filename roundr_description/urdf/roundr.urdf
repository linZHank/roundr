<?xml version="1.0" ?>


<robot name="roundr" xmlns:xacro="https://www.ros.org/wiki/xacro" >

    <!-- Colors -->
    <material name="black">
        <color rgba="0.0 0.0 0.0 1.0"/>
    </material>
    <material name="dark">
        <color rgba="0.3 0.3 0.3 1.0"/>
    </material>
    <material name="light_black">
        <color rgba="0.4 0.4 0.4 1.0"/>
    </material>
    <material name="blue">
        <color rgba="0.0 0.0 0.8 1.0"/>
    </material>
    <material name="green">
        <color rgba="0.0 0.8 0.0 1.0"/>
    </material>
    <material name="grey">
        <color rgba="0.2 0.2 0.2 1.0"/>
    </material>
    <material name="orange">
        <color rgba="${255/255} ${108/255} ${10/255} 1.0"/>
    </material>
    <material name="brown">
        <color rgba="${222/255} ${207/255} ${195/255} 1.0"/>
    </material>
    <material name="red">
        <color rgba="0.8 0.0 0.0 1.0"/>
    </material>
    <material name="white">
        <color rgba="1.0 1.0 1.0 1.0"/>
    </material>
    <material name="white_trans">
        <color rgba="1.0 1.0 1.0 0.7"/>
    </material>
    
    <!-- Define robot constants -->
    <xacro:property name="base_radius" value="0.0635"/>
    <xacro:property name="base_width" value="0.003"/>
    <xacro:property name="base_mass" value="0.030"/>

    <xacro:property name="wheel_radius" value="0.021"/>
    <xacro:property name="wheel_width" value="0.019"/>
    <xacro:property name="wheel_mass" value="0.019"/>

    <xacro:property name="caster_radius" value="0.0047625"/>
    <xacro:property name="caster_mass" value="0.004"/>

    <xacro:property name="motor_width" value="0.0244"/>
    <xacro:property name="motor_depth" value="0.012"/>
    <xacro:property name="motor_height" value="0.010"/>
    <xacro:property name="motor_mass" value="0.0095"/>

    <xacro:property name="spacer_width" value="0.0015875"/>

    <!-- <xacro:property name="motor_zoff" value="0.0080875"/> -->
    <xacro:property name="motor_zoff" value="${base_width / 2 + spacer_width + motor_height / 2}"/>
    <xacro:property name="motor_yoff" value="0.03"/>

    <xacro:property name="motor_shaft_length" value="0.01"/>
    <xacro:property name="wheel_inner_width" value="0.008"/>
    <xacro:property name="caster_xoff" value="0.06"/>
    <xacro:property name="caster_zoff" value="${motor_zoff - wheel_radius + caster_radius}"/>

    <!-- Define intertial property macros  -->
    <xacro:macro name="box_inertial" params="m x y z">
        <inertial>
            <mass value="${m}"/>
            <inertia 
                ixx="${(m/12) * (y*y+ z*z)}" ixy="0.0" ixz="0.0" 
                iyy="${(m/12) * (z*z + x*x)}" iyz="0.0" 
                izz="${(m/12) * (x*x + y*y)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="cylinder_inertial" params="m r l">
        <inertial>
            <mass value="${m}"/>
            <inertia
                ixx="${(m/12) * (3*r*r+ l*l)}" ixy = "0" ixz = "0" 
                iyy="${(m/12) * (3*r*r+ l*l)}" iyz = "0" 
                izz="${(m/2) * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <xacro:macro name="sphere_inertial" params="m r">
        <inertial>
            <mass value="${m}"/>
            <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" 
                iyy="${(2/5) * m * (r*r)}" iyz="0.0" 
                izz="${(2/5) * m * (r*r)}"/>
        </inertial>
    </xacro:macro>
  

    <link name="base_link">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <cylinder length="${base_width}" radius="${base_radius}"/>
            </geometry>
            <material name="white_trans"/>
        </visual>
        <collision>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <cylinder length="${base_width}" radius="${base_radius}"/>
            </geometry>
        </collision>
    </link>

    <joint name="base_link-base_footprint" type="fixed">
        <parent link="base_link"/>
        <child link="base_footprint"/>
        <origin xyz="0.0 0.0 ${-wheel_radius+motor_zoff}" rpy="0 0 0"/>
    </joint>

    <!-- Base footprint is on the ground under the robot -->
    <link name="base_footprint"/>

    <joint name="base_link-base_inertial" type="fixed">
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <parent link="base_link"/>
        <child link="base_inertial"/>
    </joint>
    
    <!-- Inertial link stores the robot's inertial information -->
    <link name="base_inertial">
        <xacro:cylinder_inertial m="${base_mass}" r="${base_radius}" l="${base_width}"/>
    </link>

    <joint name="base_link-left_motor" type="fixed">
        <origin rpy="0 0 0" xyz="0 ${motor_yoff} ${motor_zoff}"/>
        <parent link="base_link"/>
        <child link="left_motor"/>
    </joint>

    <link name="left_motor">
        <visual>
            <geometry>
                <!-- <mesh filename="package://urdf/meshes/micro-metal-gearmotor-with-1086-bracket.dae"/> -->
                <box size="${motor_depth} ${motor_width} ${motor_height}"/>
            </geometry>
            <material name="brown"/>
        </visual>
        <collision>
            <geometry>
                <box size="${motor_depth} ${motor_width} ${motor_height}"/>
                <!-- <box size="0.038 0.012 0.010"/> -->
            </geometry>
        </collision>
        <xacro:box_inertial m="${motor_mass}" x="${motor_depth}" y="${motor_width}" z="${motor_height}"/>
    </link>
    
    <joint name="left_motor-left_wheel" type="continuous">
        <origin rpy="${-pi/2} 0 0" xyz="0 ${motor_width / 2 + motor_shaft_length - wheel_inner_width / 2} 0"/>
        <parent link="left_motor"/>
        <child link="left_wheel"/>
        <axis rpy="0 0 0" xyz="0 0 1"/>
    </joint>

    <link name="left_wheel">
        <visual>
            <geometry>
                <!-- <mesh filename="package://urdf/meshes/pololu-wheel-42x19mm.dae"/> -->
                <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <origin rpy=" 0 0 0" xyz="0 0 0"/>
            <geometry>
                <!-- <cylinder length="0.019" radius="0.021"/> -->
                <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertial m="${wheel_mass}" r="${wheel_radius}" l="${wheel_width}"/>
    </link>
    
    <joint name="base_link-right_motor" type="fixed">
        <origin rpy="0 0 0" xyz="0 ${-motor_yoff} ${motor_zoff}"/>
        <parent link="base_link"/>
        <child link="right_motor"/>
    </joint>

    <link name="right_motor">
        <visual>
            <geometry>
                <!-- <mesh filename="package://urdf/meshes/micro-metal-gearmotor-with-1086-bracket.dae"/> -->
                <box size="${motor_depth} ${motor_width} ${motor_height}"/>
            </geometry>
            <material name="brown"/>
        </visual>
        <collision>
            <geometry>
                <box size="${motor_depth} ${motor_width} ${motor_height}"/>
                <!-- <box size="0.038 0.012 0.010"/> -->
            </geometry>
        </collision>
        <xacro:box_inertial m="${motor_mass}" x="${motor_depth}" y="${motor_width}" z="${motor_height}"/>
    </link>
    
    <joint name="right_motor-right_wheel" type="continuous">
        <origin rpy="${-pi/2} 0 0" xyz="0 ${-(motor_width / 2 + motor_shaft_length - wheel_inner_width / 2)} 0"/>
        <parent link="right_motor"/>
        <child link="right_wheel"/>
        <axis rpy="0 0 0" xyz="0 0 1"/>
    </joint>

    <link name="right_wheel">
        <visual>
            <geometry>
                <!-- <mesh filename="package://urdf/meshes/pololu-wheel-42x19mm.dae"/> -->
                <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
            </geometry>
            <material name="black"/>
        </visual>
        <collision>
            <origin rpy=" 0 0 0" xyz="0 0 0"/>
            <geometry>
                <!-- <cylinder length="0.019" radius="0.021"/> -->
                <cylinder length="${wheel_width}" radius="${wheel_radius}"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertial m="${wheel_mass}" r="${wheel_radius}" l="${wheel_width}"/>
    </link>
    
    <joint name="base_link-front_caster" type="fixed">
        <origin rpy="0 0 0" xyz="${caster_xoff} 0 ${caster_zoff}"/>
        <parent link="base_link"/>
        <child link="front_caster"/>
    </joint>

    <link name="front_caster">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
                <!-- <mesh filename="package://urdf/meshes/pololu-ball-caster-with-0-375in-ball.dae"/> -->
            </geometry>
            <material name="grey"/>
        </visual>
        <collision>
            <origin rpy=" 0 0 0" xyz="0 0 -0.00505"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
            </geometry>
        </collision>
        <xacro:sphere_inertial m="${caster_mass}" r="${caster_radius}"/>
        <contact>
            <lateral_friction value="0.0"/>
            <rolling_friction value="0.0"/>
            <stiffness value="30000"/>
            <damping value="1000"/>
        </contact>
    </link>

    <joint name="base_link-rear_caster" type="fixed">
        <origin rpy="0 0 0" xyz="${-caster_xoff} 0 ${caster_zoff}"/>
        <parent link="base_link"/>
        <child link="rear_caster"/>
    </joint>

    <link name="rear_caster">
        <visual>
            <origin rpy="0 0 0" xyz="0 0 0"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
                <!-- <mesh filename="package://urdf/meshes/pololu-ball-caster-with-0-375in-ball.dae"/> -->
            </geometry>
            <material name="grey"/>
        </visual>
        <collision>
            <origin rpy=" 0 0 0" xyz="0 0 -0.00505"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
            </geometry>
        </collision>
        <xacro:sphere_inertial m="${caster_mass}" r="${caster_radius}"/>
        <contact>
            <lateral_friction value="0.0"/>
            <rolling_friction value="0.0"/>
            <stiffness value="30000"/>
            <damping value="1000"/>
        </contact>
    </link>

    <joint name="base_link-lidar_motor" type="fixed">
        <origin rpy="0 0 0" xyz="0.045 0 0.072"/>
        <parent link="base_link"/>
        <child link="lidar_motor"/>
    </joint>

    <link name="lidar_motor">
        <visual>
            <geometry>
                <cylinder length="0.016" radius="0.016"/>
            </geometry>
            <material name="grey"/>
        </visual>
        <collision>
            <geometry>
                <cylinder length="0.016" radius="0.016"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertial m="0.16" r="0.016" l="0.016"/>
    </link>

    <joint name="base_link-lidar_house" type="fixed">
        <origin rpy="0 0 0" xyz="0 0 0.092"/>
        <parent link="base_link"/>
        <child link="lidar_house"/>
    </joint>

    <link name="lidar_house">
        <visual>
            <geometry>
                <cylinder length="0.024" radius="0.035"/>
            </geometry>
            <material name="dark"/>
        </visual>
        <collision>
            <geometry>
                <cylinder length="0.024" radius="0.035"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertial m="0.02" r="0.035" l="0.024"/>
    </link>

    <!-- gazebo plugin for differential drive  -->
    <gazebo>
        <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
            <ros>
                <namespace>/roundr</namespace>
            </ros>
            <!-- wheels -->
            <left_joint>left_motor-left_wheel</left_joint>
            <right_joint>right_motor-right_wheel</right_joint>
            <!-- kinematics -->
            <wheel_separation>0.0964</wheel_separation>
            <wheel_diameter>0.042</wheel_diameter>
            <!-- limits -->
            <max_wheel_torque>0.24516625</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>
            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>true</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>
            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>
            <update_rate>50</update_rate>
        </plugin>
    </gazebo>


    <gazebo reference="lidar_house">
        <!-- Visuals / Collisions omitted for this example -->
        <sensor type="gpu_ray" name="head_rplidar_sensor">
            <visualize>true</visualize>
            <update_rate>10</update_rate>
            <ray>
                <scan>
                    <horizontal>
                        <samples>2000</samples>
                        <resolution>1</resolution>
                        <min_angle>-3.1415926</min_angle>
                        <max_angle>3.1415926</max_angle>
                    </horizontal>
                </scan>
                <range>
                    <min>0.15</min>
                    <max>12.0</max>
                    <resolution>0.01</resolution>
                </range>
                <!-- Using gazebo's noise instead of plugin's -->
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.01</stddev>
                </noise>
            </ray>
            <plugin name="gazebo_ros_head_lidar_controller" filename="libgazebo_ros_ray_sensor.so">
                <!-- Change namespace and output topic so published topic is /rrbot/laser/scan -->
                <ros>
                    <namespace>/roundr/laser</namespace>
                    <argument>~/out:=scan</argument>
                </ros>
                <output_type>sensor_msgs/LaserScan</output_type>
                </plugin>
            </sensor>
        </gazebo>

</robot>

